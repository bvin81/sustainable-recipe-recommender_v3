#!/usr/bin/env python3
"""
Heroku-ra optimaliz√°lt setup_database.py
Automatikusan l√©trehozza a processed_recipes.csv-t deploy k√∂zben
"""

import os
import sys
import pandas as pd
import numpy as np
from pathlib import Path

def setup_csv_for_heroku():
    """CSV setup Heroku-hoz optimaliz√°lva"""
    print("üöÄ Heroku CSV Setup - Processing hungarian_recipes_github.csv")
    print("=" * 60)
    
    try:
        # Ellen≈ërizz√ºk a f√°jlokat
        original_csv = Path("hungarian_recipes_github.csv")
        output_csv = Path("data/processed_recipes.csv")
        
        print(f"üìä Original CSV: {original_csv.exists()} - {original_csv}")
        print(f"üìÅ Data directory: {Path('data').exists()}")
        print(f"üéØ Target CSV: {output_csv}")
        
        if not original_csv.exists():
            print("‚ùå hungarian_recipes_github.csv not found!")
            return create_fallback_csv(output_csv)
        
        # CSV bet√∂lt√©se
        print("üìã Loading hungarian_recipes_github.csv...")
        
        # Encoding detection
        encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']
        df = None
        used_encoding = None
        
        for encoding in encodings:
            try:
                df = pd.read_csv(original_csv, encoding=encoding)
                used_encoding = encoding
                print(f"‚úÖ Successfully loaded with {encoding} encoding")
                break
            except (UnicodeDecodeError, pd.errors.EmptyDataError):
                continue
        
        if df is None:
            print("‚ùå Failed to load CSV with any encoding")
            return create_fallback_csv(output_csv)
        
        print(f"üìä Loaded {len(df)} recipes")
        print(f"üìã Columns: {list(df.columns)}")
        
        # Process the CSV
        processed_df = process_hungarian_csv(df)
        
        if processed_df is None:
            print("‚ùå CSV processing failed")
            return create_fallback_csv(output_csv)
        
        # Save processed CSV
        os.makedirs('data', exist_ok=True)
        processed_df.to_csv(output_csv, index=False, encoding='utf-8')
        
        print(f"‚úÖ Processed CSV saved: {output_csv}")
        print(f"üìä Recipes in output: {len(processed_df)}")
        
        # Validate output
        validate_processed_csv(output_csv)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Setup error: {e}")
        return create_fallback_csv(output_csv)

def process_hungarian_csv(df):
    """Process the hungarian recipes CSV"""
    try:
        print("üîß Processing Hungarian recipes...")
        
        # Column mapping
        column_mapping = {
            'name': 'title',
            'ingredients': 'ingredients', 
            'instructions': 'instructions',
            'images': 'images'
        }
        
        # Rename columns if they exist
        for old_col, new_col in column_mapping.items():
            if old_col in df.columns and old_col != new_col:
                df = df.rename(columns={old_col: new_col})
        
        # Add recipe IDs
        df['recipeid'] = range(1, len(df) + 1)
        
        # Ensure required columns exist
        required_columns = ['title', 'ingredients', 'images']
        for col in required_columns:
            if col not in df.columns:
                df[col] = f'Sample {col}'
        
        # Handle missing instructions
        if 'instructions' not in df.columns:
            df['instructions'] = 'Elk√©sz√≠t√©si √∫tmutat√≥ hamarosan...'
        
        # Process scores if they exist
        if 'env_score' in df.columns and 'nutri_score' in df.columns and 'meal_score' in df.columns:
            df = normalize_scores(df)
        else:
            print("‚ö†Ô∏è Score columns not found, using defaults")
            df['HSI'] = np.random.uniform(60, 90, len(df))  # Health Score
            df['ESI'] = np.random.uniform(50, 85, len(df))  # Environmental Score  
            df['PPI'] = np.random.uniform(70, 95, len(df))  # Popularity Score
        
        # Calculate composite score
        df['composite_score'] = (df['ESI'] * 0.4 + df['HSI'] * 0.4 + df['PPI'] * 0.2)
        
        # Clean text data
        df = clean_text_data(df)
        
        # Process images - JAV√çTVA!
        df = process_image_urls(df)
        
        return df
        
    except Exception as e:
        print(f"‚ùå Process error: {e}")
        return None

def process_image_urls(df):
    """Process image URLs - JAV√çTOTT verzi√≥ id√©z≈ëjelek √©s t√∂bbsz√∂r√∂s URL-ek kezel√©s√©vel"""
    print("üñºÔ∏è Processing image URLs...")
    
    def clean_image_url(img_string):
        """Clean image URL - elt√°vol√≠tja az id√©z≈ëjeleket √©s veszi az els≈ë URL-t"""
        
        if pd.isna(img_string) or not img_string:
            return get_fallback_image()
        
        # String-g√© konvert√°l√°s
        img_str = str(img_string).strip()
        
        # √úres ellen≈ërz√©s
        if not img_str or img_str.lower() in ['nan', '', 'null']:
            return get_fallback_image()
        
        # KULCS FIX: Id√©z≈ëjelek elt√°vol√≠t√°sa
        img_str = img_str.strip('"').strip("'")
        
        # T√∂bbsz√∂r√∂s URL kezel√©se - vessz≈ëvel elv√°lasztott
        if ',' in img_str:
            urls = img_str.split(',')
            first_url = urls[0].strip().strip('"').strip("'")
        else:
            first_url = img_str
        
        # URL valid√°l√°s √©s jav√≠t√°s
        if first_url.startswith('http'):
            # HTTPS biztos√≠t√°sa
            if first_url.startswith('http://'):
                first_url = first_url.replace('http://', 'https://')
            
            print(f"   ‚úÖ Valid image URL: {first_url[:60]}...")
            return first_url
        
        elif first_url.startswith('www.'):
            clean_url = f"https://{first_url}"
            print(f"   üîß Fixed www URL: {clean_url[:60]}...")
            return clean_url
        
        else:
            print(f"   ‚ö†Ô∏è Invalid URL format: {first_url[:60]}...")
            return get_fallback_image()
    
    # Apply image processing
    print(f"üîç Processing {len(df)} image URLs...")
    df['images'] = df['images'].apply(clean_image_url)
    
    # Debug: els≈ë 5 k√©p ellen≈ërz√©se
    print(f"üñºÔ∏è Processed image URLs (first 5):")
    for i in range(min(5, len(df))):
        recipe = df.iloc[i]
        print(f"   {i+1}. {recipe['title'][:30]}...")
        print(f"      Image: {recipe['images']}")
    
    # Statisztika
    valid_images = sum(1 for img in df['images'] if img.startswith('http') and 'fallback' not in img)
    fallback_images = len(df) - valid_images
    
    print(f"üìä Image processing results:")
    print(f"   ‚úÖ Valid external images: {valid_images}")
    print(f"   üîÑ Fallback images: {fallback_images}")
    
    return df

def get_fallback_image():
    """Get fallback image URL"""
    # Garant√°ltan m≈±k√∂d≈ë Unsplash k√©pek
    fallback_images = [
        'https://images.unsplash.com/photo-1547592180-85f173990554?w=400&h=300&fit=crop&auto=format',
        'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop&auto=format', 
        'https://images.unsplash.com/photo-1544943910-4c1dc44aab44?w=400&h=300&fit=crop&auto=format',
        'https://images.unsplash.com/photo-1558030006-450675393462?w=400&h=300&fit=crop&auto=format',
        'https://images.unsplash.com/photo-1572441713132-51c75654db73?w=400&h=300&fit=crop&auto=format'
    ]
    return np.random.choice(fallback_images)

def normalize_scores(df):
    """Normalize score columns to 0-100 scale"""
    print("üìä Normalizing scores...")
    
    # Environmental Score - invert (lower is better environmentally)
    if 'env_score' in df.columns:
        env_min, env_max = df['env_score'].min(), df['env_score'].max()
        if env_max > env_min:
            df['ESI'] = 100 - ((df['env_score'] - env_min) / (env_max - env_min) * 100)
        else:
            df['ESI'] = 70.0
    
    # Health Score - direct (higher is better)
    if 'nutri_score' in df.columns:
        nutri_max = df['nutri_score'].max()
        if nutri_max > 100:
            df['HSI'] = (df['nutri_score'] / nutri_max) * 100
        else:
            df['HSI'] = df['nutri_score']
    
    # Popularity Score - direct (higher is more popular)
    if 'meal_score' in df.columns:
        meal_max = df['meal_score'].max()
        if meal_max > 100:
            df['PPI'] = (df['meal_score'] / meal_max) * 100
        else:
            df['PPI'] = df['meal_score']
    
    print(f"   HSI range: {df['HSI'].min():.1f} - {df['HSI'].max():.1f}")
    print(f"   ESI range: {df['ESI'].min():.1f} - {df['ESI'].max():.1f}")
    print(f"   PPI range: {df['PPI'].min():.1f} - {df['PPI'].max():.1f}")
    
    return df

def clean_text_data(df):
    """Clean text columns"""
    print("üßπ Cleaning text data...")
    
    # Fill missing values
    df['title'] = df['title'].fillna('N√©vtelen Recept')
    df['ingredients'] = df['ingredients'].fillna('√ñsszetev≈ëk lista hamarosan...')
    df['instructions'] = df['instructions'].fillna('Elk√©sz√≠t√©si √∫tmutat√≥ hamarosan...')
    df['images'] = df['images'].fillna('')
    
    # Clean strings
    text_columns = ['title', 'ingredients', 'instructions']
    for col in text_columns:
        if col in df.columns:
            df[col] = df[col].astype(str).str.strip()
    
    return df

def create_fallback_csv(output_path):
    """Create fallback CSV if original processing fails"""
    print("üîß Creating fallback CSV with sample Hungarian recipes...")
    
    sample_recipes = [
        {
            'recipeid': 1,
            'title': 'Hagyom√°nyos Guly√°sleves',
            'ingredients': 'marhah√∫s, hagyma, paprika, paradicsom, burgonya, fokhagyma, k√∂m√©ny, majoranna',
            'instructions': 'A h√∫st kock√°kra v√°gjuk √©s enyh√©n megs√≥zzuk. Megdinsztelj√ºk a hagym√°t, hozz√°adjuk a paprik√°t. Fel√∂ntj√ºk v√≠zzel √©s f≈ëzz√ºk 1.5 √≥r√°t. Hozz√°adjuk a burgony√°t √©s tov√°bb f≈ëzz√ºk.',
            'images': 'https://images.unsplash.com/photo-1547592180-85f173990554?w=400&h=300&fit=crop',
            'HSI': 75.0, 'ESI': 60.0, 'PPI': 90.0, 'composite_score': 71.0
        },
        {
            'recipeid': 2,
            'title': 'Veget√°ri√°nus Lecs√≥',
            'ingredients': 'paprika, paradicsom, hagyma, toj√°s, tofu, ol√≠vaolaj, s√≥, bors, fokhagyma',
            'instructions': 'A hagym√°t √©s fokhagym√°t megdinsztelj√ºk ol√≠vaolajban. Hozz√°adjuk a felszeletelt paprik√°t. Paradicsomot √©s kock√°ra v√°gott tofut adunk hozz√°. Toj√°ssal d√∫s√≠tjuk.',
            'images': 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400&h=300&fit=crop',
            'HSI': 85.0, 'ESI': 80.0, 'PPI': 70.0, 'composite_score': 78.0
        },
        {
            'recipeid': 3,
            'title': 'Hal√°szl√© Szegedi M√≥dra',
            'ingredients': 'ponty, csuka, harcsa, hagyma, paradicsom, paprika, s√≥, bab√©rlev√©l',
            'instructions': 'A halakat megtiszt√≠tjuk √©s feldaraboljuk. A halak fej√©b≈ël √©s fark√°b√≥l er≈ës alapot f≈ëz√ºnk. Az alapot lesz≈±rj√ºk √©s beletessz√ºk a haldarabokat. Paprik√°val √≠zes√≠tj√ºk.',
            'images': 'https://images.unsplash.com/photo-1544943910-4c1dc44aab44?w=400&h=300&fit=crop',
            'HSI': 80.0, 'ESI': 70.0, 'PPI': 75.0, 'composite_score': 74.0
        },
        {
            'recipeid': 4,
            'title': 'T√∫r√≥s Csusza',
            'ingredients': 'sz√©les met√©lt, t√∫r√≥, tejf√∂l, szalonna, hagyma, s√≥, bors',
            'instructions': 'A t√©szt√°t s√≥s v√≠zben megf≈ëzz√ºk √©s lesz≈±rj√ºk. A szalonn√°t kock√°kra v√°gjuk √©s kis√ºtj√ºk. A t√©szt√°t √∂sszekeverj√ºk a t√∫r√≥val, tejf√∂llel √©s a szalonn√°val.',
            'images': 'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=400&h=300&fit=crop',
            'HSI': 65.0, 'ESI': 55.0, 'PPI': 80.0, 'composite_score': 65.0
        },
        {
            'recipeid': 5,
            'title': 'Gombapaprik√°s Galusk√°val',
            'ingredients': 'gomba, hagyma, paprika, tejf√∂l, liszt, toj√°s, petrezselyem, olaj',
            'instructions': 'A gomb√°t felszeletelj√ºk √©s kis√ºtj√ºk. Hagym√°t dinsztel√ºnk, paprik√°t adunk hozz√°. A gomb√°t hozz√°adjuk, tejf√∂llel lefuttatjuk. Galusk√°t f≈ëz√ºnk mell√©.',
            'images': 'https://images.unsplash.com/photo-1565299507177-b0ac66763828?w=400&h=300&fit=crop',
            'HSI': 70.0, 'ESI': 75.0, 'PPI': 65.0, 'composite_score': 70.0
        }
    ]
    
    df = pd.DataFrame(sample_recipes)
    
    # Ensure data directory exists
    os.makedirs(output_path.parent, exist_ok=True)
    
    # Save CSV
    df.to_csv(output_path, index=False, encoding='utf-8')
    
    print(f"‚úÖ Fallback CSV created: {len(df)} sample recipes")
    
    return True

def validate_processed_csv(csv_path):
    """Validate the processed CSV"""
    try:
        df = pd.read_csv(csv_path)
        
        required_columns = ['recipeid', 'title', 'ingredients', 'images', 'HSI', 'ESI', 'PPI', 'composite_score']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            print(f"‚ö†Ô∏è Missing columns: {missing_columns}")
        else:
            print("‚úÖ All required columns present")
        
        print(f"üìä Final validation:")
        print(f"   Recipes: {len(df)}")
        print(f"   Columns: {len(df.columns)}")
        print(f"   Images with URLs: {sum(1 for img in df['images'] if img.startswith('http'))}")
        
        # Sample recipes
        print(f"\nüìã Sample recipes:")
        for i in range(min(3, len(df))):
            recipe = df.iloc[i]
            print(f"   {i+1}. {recipe['title']}")
            print(f"      Image: {recipe['images'][:60]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Validation error: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ HEROKU CSV SETUP")
    print("=" * 50)
    
    success = setup_csv_for_heroku()
    
    if success:
        print("\nüéâ CSV SETUP SUCCESSFUL!")
        print("‚úÖ processed_recipes.csv is ready")
        print("‚úÖ User study can now load real Hungarian recipes")
        print("‚úÖ Images will display properly")
    else:
        print("\n‚ö†Ô∏è CSV SETUP COMPLETED WITH FALLBACK")
        print("‚ö†Ô∏è Using sample data instead of hungarian_recipes_github.csv")
        print("‚úÖ App will still work with sample recipes")
    
    print("\nüìã Next: Deploy the app and test the recipe display")
