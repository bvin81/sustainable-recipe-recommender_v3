#!/usr/bin/env python3
"""
Magyar receptek adatfeldolgoz√°sa √©s normaliz√°l√°sa - JAV√çTOTT VERZI√ì
DataFrame API kompatibilit√°si fix
"""

import pandas as pd
import numpy as np
from pathlib import Path
import os
import sys
import re
import json

class HungarianRecipeProcessor:
    """Magyar receptek feldolgoz√°sa √©s normaliz√°l√°sa k√ºls≈ë k√©pekkel"""
    
    def __init__(self, csv_file_path="hungarian_recipes_github.csv"):
        self.csv_path = csv_file_path
        self.processed_data = None
        
    def load_and_validate_data(self):
        """CSV bet√∂lt√©se √©s valid√°l√°sa"""
        try:
            print(f"üìä Bet√∂lt√©s: {self.csv_path}")
            
            # T√∂bbf√©le encoding pr√≥b√°l√°sa
            encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']
            df = None
            
            for encoding in encodings:
                try:
                    df = pd.read_csv(self.csv_path, encoding=encoding)
                    print(f"‚úÖ Sikeres bet√∂lt√©s {encoding} encoding-gal")
                    break
                except UnicodeDecodeError:
                    continue
            
            if df is None:
                print("‚ùå Nem siker√ºlt bet√∂lteni egyik encoding-gal sem")
                return None
            
            print(f"‚úÖ Sikeresen bet√∂ltve: {len(df)} recept")
            print(f"üìã Oszlopok: {list(df.columns)}")
            
            # K√∂telez≈ë oszlopok ellen≈ërz√©se
            required_columns = ['name', 'ingredients', 'env_score', 'nutri_score', 'meal_score']
            optional_columns = ['instructions', 'images']
            
            missing_required = [col for col in required_columns if col not in df.columns]
            if missing_required:
                print(f"‚ùå Hi√°nyz√≥ k√∂telez≈ë oszlopok: {missing_required}")
                return None
            
            missing_optional = [col for col in optional_columns if col not in df.columns]
            if missing_optional:
                print(f"‚ö†Ô∏è Hi√°nyz√≥ opcion√°lis oszlopok: {missing_optional}")
                # L√©trehozzuk az √ºres oszlopokat
                for col in missing_optional:
                    df[col] = ''
            
            # Alapvet≈ë adatmin≈ës√©g ellen≈ërz√©s
            print(f"üîç Adatmin≈ës√©g ellen≈ërz√©s:")
            print(f"   √úres nevek: {df['name'].isna().sum()}")
            print(f"   √úres √∂sszetev≈ëk: {df['ingredients'].isna().sum()}")
            print(f"   Env_score tartom√°ny: {df['env_score'].min():.2f} - {df['env_score'].max():.2f}")
            print(f"   Nutri_score tartom√°ny: {df['nutri_score'].min():.2f} - {df['nutri_score'].max():.2f}")
            print(f"   Meal_score tartom√°ny: {df['meal_score'].min():.2f} - {df['meal_score'].max():.2f}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå Bet√∂lt√©si hiba: {e}")
            return None
    
    def normalize_environmental_scores(self, df):
        """K√∂rnyezeti pontsz√°mok normaliz√°l√°sa"""
        print("üå± K√∂rnyezeti pontsz√°mok normaliz√°l√°sa...")
        
        # K√∂rnyezeti score normaliz√°l√°sa (magasabb √©rt√©k = rosszabb k√∂rnyezetileg)
        # Invert√°ljuk hogy magasabb = jobb legyen
        env_min = df['env_score'].min()
        env_max = df['env_score'].max()
        
        print(f"   Eredeti env_score tartom√°ny: {env_min:.2f} - {env_max:.2f}")
        
        # Normaliz√°l√°s 0-100 sk√°l√°ra (invert√°lva)
        df['ESI'] = 100 - ((df['env_score'] - env_min) / (env_max - env_min) * 100)
        
        print(f"   Normaliz√°lt env_score tartom√°ny: {df['ESI'].min():.2f} - {df['ESI'].max():.2f}")
        
        return df
    
    def normalize_other_scores(self, df):
        """Egy√©b pontsz√°mok normaliz√°l√°sa"""
        print("üìä Egy√©b pontsz√°mok normaliz√°l√°sa...")
        
        # Nutri_score (m√°r 0-100 sk√°l√°n kellene lennie)
        nutri_min, nutri_max = df['nutri_score'].min(), df['nutri_score'].max()
        print(f"   nutri_score tartom√°ny: {nutri_min:.2f} - {nutri_max:.2f}")
        
        if nutri_max <= 100:
            df['HSI'] = df['nutri_score']  # Health Score Index
            print("   nutri_score m√°r normaliz√°lt")
        else:
            df['HSI'] = (df['nutri_score'] / nutri_max) * 100
            print("   nutri_score normaliz√°lva")
        
        # Meal_score (n√©pszer≈±s√©g/√≠zletess√©g)
        meal_min, meal_max = df['meal_score'].min(), df['meal_score'].max()
        print(f"   meal_score tartom√°ny: {meal_min:.2f} - {meal_max:.2f}")
        
        if meal_max <= 100:
            df['PPI'] = df['meal_score']  # Popularity/Preference Index
            print("   meal_score m√°r normaliz√°lt")
        else:
            df['PPI'] = (df['meal_score'] / meal_max) * 100
            print("   meal_score normaliz√°lva")
        
        return df
    
    def calculate_composite_score(self, df):
        """Kompozit pontsz√°m sz√°m√≠t√°sa"""
        print("üî¢ Kompozit pontsz√°m sz√°m√≠t√°sa...")
        
        # S√∫lyozott √°tlag: K√∂rnyezet 40%, Eg√©szs√©g 40%, N√©pszer≈±s√©g 20%
        df['composite_score'] = (
            df['ESI'] * 0.4 +    # Environmental Score Index
            df['HSI'] * 0.4 +    # Health Score Index  
            df['PPI'] * 0.2      # Popularity/Preference Index
        )
        
        print(f"   Kompozit score tartom√°ny: {df['composite_score'].min():.2f} - {df['composite_score'].max():.2f}")
        print(f"   √Åtlagos kompozit score: {df['composite_score'].mean():.2f}")
        
        return df
    
    def clean_text_data(self, df):
        """Sz√∂veges adatok tiszt√≠t√°sa - JAV√çTOTT VERZI√ì"""
        print("üßπ Adatok tiszt√≠t√°sa...")
        
        try:
            # JAV√çT√ÅS: .str accessor helyett direct pandas m≈±veletek
            
            # √úres √©rt√©kek kezel√©se
            df['name'] = df['name'].fillna('N√©vtelen recept')
            df['ingredients'] = df['ingredients'].fillna('Ismeretlen √∂sszetev≈ëk')
            df['instructions'] = df['instructions'].fillna('Nincs √∫tmutat√≥')
            df['images'] = df['images'].fillna('')
            
            # Sz√∂veges mez≈ëk tiszt√≠t√°sa (biztons√°gos m√≥dszer)
            for col in ['name', 'ingredients', 'instructions']:
                if col in df.columns:
                    # Pandas Series.str helyett apply haszn√°lata
                    df[col] = df[col].astype(str).apply(lambda x: x.strip() if isinstance(x, str) else str(x))
            
            # Recipe ID hozz√°ad√°sa
            df['recipeid'] = range(1, len(df) + 1)
            
            # Oszlop √°tnevez√©s
            df = df.rename(columns={'name': 'title'})
            
            print(f"‚úÖ Tiszt√≠tva: {len(df)} recept k√©szenl√©ti √°llapotban")
            
            return df
            
        except Exception as e:
            print(f"‚ö†Ô∏è Tiszt√≠t√°si hiba: {e}")
            # Fallback: alapvet≈ë tiszt√≠t√°s
            df['recipeid'] = range(1, len(df) + 1)
            df = df.rename(columns={'name': 'title'})
            return df
    
    def process_image_urls(self, df):
        """K√©p URL-ek feldolgoz√°sa"""
        print("üñºÔ∏è K√©p URL-ek feldolgoz√°sa...")
        
        def process_single_image_url(images_string):
            """Egy k√©p URL feldolgoz√°sa"""
            if pd.isna(images_string) or not images_string:
                return '/static/images/recipe_placeholder.jpg'
            
            # Ha string, akkor split by comma √©s els≈ë URL
            if isinstance(images_string, str):
                urls = images_string.split(',')
                first_url = urls[0].strip().strip('"').strip("'")
                
                # Ellen≈ërz√©s hogy val√≥s URL-e
                if first_url.startswith('http'):
                    print(f"   üñºÔ∏è K√©p URL: {first_url[:60]}...")
                    return first_url
            
            # Fallback
            return '/static/images/recipe_placeholder.jpg'
        
        # Biztons√°gos apply m≈±velet
        try:
            df['images'] = df['images'].apply(process_single_image_url)
        except Exception as e:
            print(f"‚ö†Ô∏è K√©p feldolgoz√°si hiba: {e}")
            df['images'] = '/static/images/recipe_placeholder.jpg'
        
        return df
    
    def create_user_study_sample(self, df, sample_size=50):
        """User study minta l√©trehoz√°sa kiegyens√∫lyozott kompozit score-ral"""
        print(f"üéØ User study minta l√©trehoz√°sa ({sample_size} recept)...")
        
        # Kompozit score quartile-ok
        df['score_quartile'] = pd.qcut(df['composite_score'], 
                                     q=4, 
                                     labels=['low', 'medium', 'high', 'very_high'])
        
        # Kiegyens√∫lyozott mintav√©telez√©s
        sample_per_quartile = sample_size // 4
        remainder = sample_size % 4
        
        sampled_dfs = []
        for i, quartile in enumerate(['low', 'medium', 'high', 'very_high']):
            quartile_data = df[df['score_quartile'] == quartile]
            
            # Extra minta az els≈ë quartile-nek ha marad√©k van
            current_sample_size = sample_per_quartile + (1 if i < remainder else 0)
            
            if len(quartile_data) >= current_sample_size:
                sampled = quartile_data.sample(n=current_sample_size)
            else:
                sampled = quartile_data
            
            sampled_dfs.append(sampled)
            print(f"   {quartile}: {len(sampled)} recept")
        
        final_sample = pd.concat(sampled_dfs, ignore_index=True)
        print(f"‚úÖ User study minta k√©sz: {len(final_sample)} recept")
        
        return final_sample
    
    def generate_statistics_report(self, df):
        """Statisztikai riport gener√°l√°sa"""
        print(f"\nüìä ADATSTATISZTIK√ÅK")
        print("=" * 50)
        print(f"üìà Receptek sz√°ma: {len(df)}")
        print(f"üìã Oszlopok: {len(df.columns)}")
        
        # Score statisztik√°k
        for score_name, col_name in [('HSI', 'HSI'), ('ESI', 'ESI'), ('PPI', 'PPI'), ('composite_score', 'composite_score')]:
            if col_name in df.columns:
                mean_val = df[col_name].mean()
                std_val = df[col_name].std()
                min_val = df[col_name].min()
                max_val = df[col_name].max()
                
                print(f"\n{score_name}:")
                print(f"   √Åtlag: {mean_val:.2f} ¬± {std_val:.2f}")
                print(f"   Tartom√°ny: {min_val:.2f} - {max_val:.2f}")
        
        # Top receptek
        if 'composite_score' in df.columns and len(df) > 0:
            print(f"\nüèÜ TOP 5 RECEPT (kompozit score):")
            top_recipes = df.nlargest(5, 'composite_score')[['title', 'composite_score']]
            for _, recipe in top_recipes.iterrows():
                title = recipe['title'][:40] + ('...' if len(recipe['title']) > 40 else '')
                print(f"   {title:<40} | Score: {recipe['composite_score']:.1f}")
        
        # Adatmin≈ës√©g
        print(f"\nüîç ADATMIN≈êS√âG:")
        print(f"   Hi√°nyz√≥ c√≠mek: {df['title'].isna().sum()}")
        print(f"   Hi√°nyz√≥ √∂sszetev≈ëk: {df['ingredients'].isna().sum()}")
        if 'instructions' in df.columns:
            print(f"   Hi√°nyz√≥ instrukci√≥k: {df['instructions'].isna().sum()}")
    
    def process_all(self, output_path="data/processed_recipes.csv", sample_size=50):
        """Teljes feldolgoz√°si pipeline"""
        print("üöÄ MAGYAR RECEPTEK FELDOLGOZ√ÅSA")
        print("=" * 50)
        
        # 1. Bet√∂lt√©s √©s valid√°l√°s
        df = self.load_and_validate_data()
        if df is None:
            return False
        
        # 2. K√∂rnyezeti pontsz√°mok normaliz√°l√°sa
        df = self.normalize_environmental_scores(df)
        
        # 3. Egy√©b pontsz√°mok normaliz√°l√°sa
        df = self.normalize_other_scores(df)
        
        # 4. Kompozit pontsz√°m sz√°m√≠t√°sa
        df = self.calculate_composite_score(df)
        
        # 5. Sz√∂veges adatok tiszt√≠t√°sa (JAV√çTOTT)
        df = self.clean_text_data(df)
        
        # 6. K√©p URL-ek feldolgoz√°sa
        df = self.process_image_urls(df)
        
        # 7. User study minta l√©trehoz√°sa
        self.processed_data = self.create_user_study_sample(df, sample_size)
        
        # 8. Statisztik√°k
        self.generate_statistics_report(self.processed_data)
        
        # 9. Ment√©s
        try:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            self.processed_data.to_csv(output_path, index=False, encoding='utf-8')
            
            print(f"\nüíæ Feldolgozott adatok mentve: {output_path}")
            print(f"üìÅ F√°jlm√©ret: {os.path.getsize(output_path) / 1024:.1f} KB")
            
            # 10. Mintaadatok ki√≠r√°sa
            print(f"\nüìã MINTA RECEPTEK:")
            for i in range(min(3, len(self.processed_data))):
                recipe = self.processed_data.iloc[i]
                print(f"   {i+1}. {recipe['title']}")
                print(f"      K√©p: {recipe['images'][:60]}...")
                print(f"      Scores: HSI={recipe['HSI']:.1f}, ESI={recipe['ESI']:.1f}, PPI={recipe['PPI']:.1f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Ment√©si hiba: {e}")
            return False

def main():
    """F≈ë feldolgoz√°si script"""
    processor = HungarianRecipeProcessor("hungarian_recipes_github.csv")
    
    # Teljes feldolgoz√°s 50 recepttel a user study-hoz
    success = processor.process_all(
        output_path="data/processed_recipes.csv",
        sample_size=50
    )
    
    if success:
        print("\nüéâ FELDOLGOZ√ÅS SIKERES!")
        print("\nüìã K√∂vetkez≈ë l√©p√©sek:")
        print("1. A processed_recipes.csv tartalmazza a feldolgozott recepteket")
        print("2. A user study automatikusan haszn√°lni fogja a val√≥s recepteket")
        print("3. A k√ºls≈ë k√©pek URL-jei megjelennek a weboldalon")
        print("4. Precision/Recall/F1 metrik√°k sz√°m√≠t√°sa implement√°l√°sra ker√ºl")
    else:
        print("\n‚ùå FELDOLGOZ√ÅS SIKERTELEN!")
        print("Ellen≈ërizd a 'hungarian_recipes_github.csv' f√°jl el√©rhet≈ës√©g√©t √©s strukt√∫r√°j√°t.")

if __name__ == "__main__":
    main()
