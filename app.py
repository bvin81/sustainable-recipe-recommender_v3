#!/usr/bin/env python3
"""
Sustainable Recipe Recommender - Main Flask Application
Enhanced version with proper indentation and debug routes
"""

import os
import sys
from pathlib import Path
from flask import Flask, render_template, jsonify, request, redirect, url_for
import pandas as pd

# Project path setup
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def create_app():
    """Enhanced Flask app l√©trehoz√°sa"""
    app = Flask(__name__)
    app.secret_key = os.environ.get('SECRET_KEY', 'your-secret-key-for-development')
    
    # User study import
    try:
        from user_study.user_study import user_study_bp
        app.register_blueprint(user_study_bp)
        print("‚úÖ User study blueprint registered")
    except ImportError as e:
        print(f"‚ö†Ô∏è User study import failed: {e}")
    
    @app.route('/')
    def index():
        """F≈ëoldal - √°tir√°ny√≠t√°s a tanulm√°nyhoz"""
        return redirect(url_for('user_study.welcome'))
    
    @app.route('/health')
    def health():
        """Heroku health check"""
        return jsonify({
            "status": "healthy",
            "service": "sustainable-recipe-recommender",
            "version": "2.0"
        })
    
    @app.route('/debug/system')
    def debug_system():
        """Rendszer debug inform√°ci√≥k"""
        try:
            result = "<h2>System Debug Info:</h2>"
            
            # File system ellen≈ërz√©s
            files_check = {
                'hungarian_recipes_github.csv': os.path.exists('hungarian_recipes_github.csv'),
                'recipe_preprocessor.py': os.path.exists('recipe_preprocessor.py'),
                'data/processed_recipes.csv': os.path.exists('data/processed_recipes.csv'),
                'user_study/user_study.py': os.path.exists('user_study/user_study.py')
            }
            
            result += "<h3>File System:</h3>"
            for file, exists in files_check.items():
                status = "‚úÖ" if exists else "‚ùå"
                result += f"{status} {file}<br>"
            
            # Python environment
            result += f"<h3>Environment:</h3>"
            result += f"Python: {sys.version}<br>"
            result += f"Working directory: {os.getcwd()}<br>"
            result += f"PATH: {sys.path[:3]}<br>"
            
            return result
            
        except Exception as e:
            return f"System debug error: {e}"
    
    @app.route('/debug/recipes')
    def debug_recipes():
        """Recipe debug inform√°ci√≥k"""
        try:
            result = "<h2>Recipe Debug Info:</h2>"
            
            # Processed recipes ellen≈ërz√©s
            if os.path.exists('data/processed_recipes.csv'):
                df = pd.read_csv('data/processed_recipes.csv')
                result += f"‚úÖ Processed recipes: {len(df)} darab<br>"
                result += f"Oszlopok: {list(df.columns)}<br><br>"
                
                result += "<h3>Els≈ë 3 recept:</h3>"
                for i in range(min(3, len(df))):
                    recipe = df.iloc[i]
                    result += f"<b>{recipe['title']}:</b><br>"
                    result += f"K√©p: {recipe.get('images', 'NINCS')}<br><br>"
            else:
                result += "‚ùå processed_recipes.csv nem tal√°lhat√≥<br>"
            
            # Original CSV ellen≈ërz√©s
            if os.path.exists('hungarian_recipes_github.csv'):
                try:
                    csv_df = pd.read_csv('hungarian_recipes_github.csv')
                    result += f"<h3>‚úÖ Original CSV:</h3>"
                    result += f"Sorok: {len(csv_df)}<br>"
                    result += f"Oszlopok: {list(csv_df.columns)}<br>"
                    
                    if 'images' in csv_df.columns:
                        first_image = str(csv_df['images'].iloc[0])
                        result += f"Els≈ë k√©p minta: {first_image[:100]}...<br>"
                except Exception as e:
                    result += f"‚ùå CSV olvas√°si hiba: {e}<br>"
            else:
                result += "‚ùå hungarian_recipes_github.csv nem tal√°lhat√≥<br>"
            
            return result
            
        except Exception as e:
            return f"Recipe debug error: {e}"
    
    return app

def create_fallback_app():
    """Fallback alkalmaz√°s ha a f≈ë app nem m≈±k√∂dik"""
    app = Flask(__name__)
    
    @app.route('/')
    def fallback_home():
        return """
        <html>
        <head><title>Sustainable Recipe Recommender</title></head>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
            <h1>üå± Sustainable Recipe Recommender</h1>
            <h2>‚öôÔ∏è System Initializing...</h2>
            <p>Az alkalmaz√°s inicializ√°l√°sa folyamatban van.</p>
            <p><a href="/debug/system">üîç System Debug</a> | 
               <a href="/debug/recipes">üìä Recipe Debug</a></p>
            <br>
            <p><small>Ha a probl√©ma tov√°bbra is fenn√°ll, k√©rj√ºk ellen≈ërizze a logokat.</small></p>
        </body>
        </html>
        """
    
    @app.route('/debug/system')
    def debug_system_fallback():
        return """
        <h2>Fallback System Debug</h2>
        <p>Az alkalmaz√°s fallback m√≥dban fut.</p>
        <p>Val√≥sz√≠n≈± probl√©m√°k:</p>
        <ul>
            <li>Hi√°nyz√≥ CSV f√°jlok</li>
            <li>Import hib√°k</li>
            <li>Database inicializ√°l√°si probl√©m√°k</li>
        </ul>
        """
    
    @app.route('/debug/recipes')  
    def debug_recipes_fallback():
        return """
        <h2>Fallback Recipe Debug</h2>
        <p>Receptek nem el√©rhet≈ëk fallback m√≥dban.</p>
        <p>Ellen≈ërizend≈ë:</p>
        <ul>
            <li>hungarian_recipes_github.csv felt√∂ltve?</li>
            <li>recipe_preprocessor.py l√©tezik?</li>
            <li>setup_database.py lefutott?</li>
        </ul>
        """
    
    @app.route('/health')
    def health_fallback():
        return jsonify({
            "status": "fallback",
            "service": "sustainable-recipe-recommender", 
            "version": "2.0-fallback"
        })
    
    return app

# App inicializ√°l√°s
try:
    app = create_app()
    print("‚úÖ App successfully created")
except Exception as e:
    print(f"‚ùå App creation failed: {e}")
    app = create_fallback_app()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('FLASK_ENV') != 'production'
    app.run(host='0.0.0.0', port=port, debug=debug)
