#!/usr/bin/env python3
"""
EGYSZER≈∞S√çTETT User Study - Core funkci√≥k
Csak a legfontosabb funkci√≥k, tiszt√°n √©s modul√°risan
"""

import os
import sys
import sqlite3
import datetime
import random
import pandas as pd
import numpy as np
from pathlib import Path
from flask import Blueprint, render_template, request, session, redirect, url_for, jsonify

# Scikit-learn importok hibakezel√©ssel
try:
    from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
    from sklearn.metrics.pairwise import cosine_similarity
    import re
    SKLEARN_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Scikit-learn nem el√©rhet≈ë - fallback m√≥dban m≈±k√∂dik")
    SKLEARN_AVAILABLE = False

# Project setup
project_root = Path(__file__).parent.parent
data_dir = project_root / "data"
data_dir.mkdir(exist_ok=True)

# Blueprint
user_study_bp = Blueprint('user_study', __name__, 
                         template_folder='templates',
                         static_folder='static')

# =============================================================================
# 1. EGYSZER≈∞ ADATB√ÅZIS OSZT√ÅLY
# =============================================================================

class SimpleDatabase:
    """Egyszer≈±s√≠tett adatb√°zis kezel≈ë"""
    
    def __init__(self):
        self.db_path = data_dir / "user_study.db"
        self._init_db()
    
    def _init_db(self):
        """Adatb√°zis inicializ√°l√°sa"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        
        conn.execute('''
            CREATE TABLE IF NOT EXISTS participants (
                user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                age_group TEXT, education TEXT, cooking_frequency TEXT,
                sustainability_awareness INTEGER, version TEXT,
                is_completed BOOLEAN DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.execute('''
            CREATE TABLE IF NOT EXISTS interactions (
                interaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER, recipe_id INTEGER, rating INTEGER,
                explanation_helpful INTEGER, view_time_seconds REAL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.execute('''
            CREATE TABLE IF NOT EXISTS questionnaire (
                user_id INTEGER PRIMARY KEY,
                system_usability INTEGER, recommendation_quality INTEGER,
                trust_level INTEGER, explanation_clarity INTEGER,
                sustainability_importance INTEGER, overall_satisfaction INTEGER,
                additional_comments TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def create_user(self, age_group, education, cooking_frequency, sustainability_awareness, version):
        """√öj felhaszn√°l√≥ l√©trehoz√°sa"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.execute('''
            INSERT INTO participants (age_group, education, cooking_frequency, 
                                    sustainability_awareness, version)
            VALUES (?, ?, ?, ?, ?)
        ''', (age_group, education, cooking_frequency, sustainability_awareness, version))
        
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id
    
    def log_interaction(self, user_id, recipe_id, rating, explanation_helpful, view_time):
        """Interakci√≥ napl√≥z√°sa"""
        conn = sqlite3.connect(self.db_path)
        conn.execute('''
            INSERT INTO interactions (user_id, recipe_id, rating, explanation_helpful, view_time_seconds)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, recipe_id, rating, explanation_helpful, view_time))
        conn.commit()
        conn.close()
    
    def save_questionnaire(self, user_id, responses):
        """K√©rd≈ë√≠v ment√©se"""
        conn = sqlite3.connect(self.db_path)
        conn.execute('''
            INSERT OR REPLACE INTO questionnaire 
            (user_id, system_usability, recommendation_quality, trust_level, 
             explanation_clarity, sustainability_importance, overall_satisfaction, additional_comments)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, responses['system_usability'], responses['recommendation_quality'],
              responses['trust_level'], responses['explanation_clarity'], 
              responses['sustainability_importance'], responses['overall_satisfaction'],
              responses['additional_comments']))
        
        # Mark completed
        conn.execute('UPDATE participants SET is_completed = 1 WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

# =============================================================================
# 2. EGYSZER≈∞ CSV KEZEL≈ê
# =============================================================================

class SimpleCSVLoader:
    """Egyszer≈±s√≠tett CSV bet√∂lt≈ë"""
    
    @staticmethod
    def load_or_create_csv():
        """CSV bet√∂lt√©se vagy sample adatok gener√°l√°sa"""
        processed_path = data_dir / "processed_recipes.csv"
        
        # Ha l√©tezik, bet√∂ltj√ºk
        if processed_path.exists():
            try:
                df = pd.read_csv(processed_path)
                if len(df) >= 10:
                    print(f"‚úÖ CSV bet√∂ltve: {len(df)} recept")
                    return df
            except:
                pass
        
        # Sample adatok gener√°l√°sa
        print("üîß Sample receptek gener√°l√°sa...")
        sample_data = []
        
        recipes = [
            ("Guly√°sleves", "marhah√∫s, hagyma, paprika, paradicsom, burgonya", "Levesek"),
            ("Veget√°ri√°nus Lecs√≥", "paprika, paradicsom, hagyma, toj√°s, tofu", "Veget√°ri√°nus"),
            ("Hal√°szl√©", "ponty, csuka, hagyma, paradicsom, paprika", "Hal√©telek"),
            ("T√∫r√≥s Csusza", "sz√©les met√©lt, t√∫r√≥, tejf√∂l, szalonna", "T√©szta√©telek"),
            ("Gombapaprik√°s", "gomba, hagyma, paprika, tejf√∂l, liszt", "Veget√°ri√°nus"),
            ("Schnitzel", "sert√©sh√∫s, liszt, toj√°s, zsemlemorzsa", "H√∫s√©telek"),
            ("T√∂lt√∂tt K√°poszta", "savany√∫ k√°poszta, dar√°lt h√∫s, rizs", "H√∫s√©telek"),
            ("R√°ntott Sajt", "trappista sajt, liszt, toj√°s, zsemlemorzsa", "Veget√°ri√°nus"),
            ("Babguly√°s", "bab, hagyma, paprika, kolb√°sz", "Levesek"),
            ("Pal√≥cleves", "b√°r√°ny, bab, burgonya, tejf√∂l, kapor", "Levesek")
        ]
        
        # 50 receptre b≈ëv√≠t√©s
        for i in range(50):
            base_recipe = recipes[i % len(recipes)]
            recipe_id = i + 1
            title = f"{base_recipe[0]}" + (f" - {i//len(recipes) + 1}. v√°ltozat" if i >= len(recipes) else "")
            
            # Random pontsz√°mok
            np.random.seed(42 + i)
            esi = max(10, min(100, np.random.normal(65, 15)))
            hsi = max(20, min(100, np.random.normal(70, 12)))
            ppi = max(30, min(100, np.random.normal(75, 10)))
            
            sample_data.append({
                'recipeid': recipe_id,
                'title': title,
                'ingredients': base_recipe[1],
                'instructions': f"F≈ëz√©si utas√≠t√°s a {title} recepthez.",
                'category': base_recipe[2],
                'images': f'https://images.unsplash.com/photo-154759218{i%10}-85f173990554?w=400&h=300&fit=crop',
                'ESI': round(esi, 2),
                'HSI': round(hsi, 2),
                'PPI': round(ppi, 2),
                'composite_score': round(esi * 0.4 + hsi * 0.4 + ppi * 0.2, 2)
            })
        
        df = pd.DataFrame(sample_data)
        df.to_csv(processed_path, index=False, encoding='utf-8')
        print(f"‚úÖ Sample CSV mentve: {len(df)} recept")
        return df

# =============================================================================
# 3. EGYSZER≈∞ AJ√ÅNL√ìRENDSZER
# =============================================================================

class SimpleRecommender:
    """Egyszer≈±s√≠tett aj√°nl√≥rendszer A/B/C tesztel√©ssel"""
    
    def __init__(self):
        self.recipes_df = SimpleCSVLoader.load_or_create_csv()
        self.search_enabled = SKLEARN_AVAILABLE
        
        if self.search_enabled:
            self._init_search()
    
    def _init_search(self):
        """Keres√©s inicializ√°l√°sa ha scikit-learn el√©rhet≈ë"""
        try:
            # Egyszer≈± TF-IDF keres√©s
            self.vectorizer = TfidfVectorizer(max_features=300, ngram_range=(1, 2))
            self.recipes_df['ingredients_clean'] = self.recipes_df['ingredients'].str.lower()
            self.tfidf_matrix = self.vectorizer.fit_transform(self.recipes_df['ingredients_clean'])
            print("‚úÖ Keres√©s inicializ√°lva")
        except Exception as e:
            print(f"‚ö†Ô∏è Keres√©s inicializ√°l√°si hiba: {e}")
            self.search_enabled = False
    
    def search_recipes(self, search_query, max_results=20):
        """Egyszer≈± keres√©s"""
        if not self.search_enabled or not search_query.strip():
            return list(range(min(max_results, len(self.recipes_df))))
        
        try:
            # TF-IDF similarity keres√©s
            query_vector = self.vectorizer.transform([search_query.lower()])
            similarity_scores = cosine_similarity(query_vector, self.tfidf_matrix).flatten()
            top_indices = similarity_scores.argsort()[-max_results:][::-1]
            
            # Fallback: egyszer≈± sz√∂veges keres√©s
            if similarity_scores.max() < 0.1:
                search_terms = search_query.lower().split(',')
                matching_indices = []
                for idx, ingredients in enumerate(self.recipes_df['ingredients_clean']):
                    if any(term.strip() in ingredients for term in search_terms):
                        matching_indices.append(idx)
                return matching_indices[:max_results]
            
            return [idx for idx in top_indices if similarity_scores[idx] > 0.05]
            
        except Exception as e:
            print(f"Keres√©si hiba: {e}")
            return list(range(min(max_results, len(self.recipes_df))))
    
    def get_recommendations(self, version='v1', search_query="", n_recommendations=5):
        """F≈ë aj√°nl√°si algoritmus A/B/C tesztel√©ssel"""
        
        # 1. Keres√©s vagy teljes lista
        if search_query.strip():
            candidate_indices = self.search_recipes(search_query, max_results=20)
            candidates = self.recipes_df.iloc[candidate_indices].copy()
        else:
            candidates = self.recipes_df.copy()
        
        if len(candidates) == 0:
            candidates = self.recipes_df.head(n_recommendations)
        
        # 2. Pontsz√°m alap√∫ rendez√©s
        candidates['recommendation_score'] = (
            candidates['ESI'] * 0.4 +      # 40% k√∂rnyezeti
            candidates['HSI'] * 0.4 +      # 40% eg√©szs√©g  
            candidates['PPI'] * 0.2        # 20% n√©pszer≈±s√©g
        )
        
        # 3. Top N kiv√°laszt√°sa
        top_recipes = candidates.nlargest(n_recommendations, 'recommendation_score')
        recommendations = top_recipes.to_dict('records')
        
        # 4. A/B/C verzi√≥-specifikus inform√°ci√≥
        for rec in recommendations:
            if version == 'v1':
                rec['show_scores'] = False
                rec['show_explanation'] = False
                rec['explanation'] = ""
            elif version == 'v2':
                rec['show_scores'] = True
                rec['show_explanation'] = False
                rec['explanation'] = ""
            elif version == 'v3':
                rec['show_scores'] = True
                rec['show_explanation'] = True
                rec['explanation'] = self._generate_explanation(rec)
        
        return recommendations
    
    def _generate_explanation(self, recipe):
        """Egyszer≈± magyar√°zat gener√°l√°s v3-hoz"""
        composite = recipe.get('composite_score', 70)
        esi = recipe.get('ESI', 70)
        
        explanation = f"Ezt a receptet {composite:.1f}/100 √∂sszpontsz√°m alapj√°n aj√°nljuk "
        explanation += "(40% k√∂rnyezeti + 40% eg√©szs√©g + 20% n√©pszer≈±s√©g). "
        
        if esi >= 80:
            explanation += "üå± Kiv√°l√≥ k√∂rnyezeti √©rt√©kel√©ssel"
        elif esi >= 60:
            explanation += "üå± K√∂rnyezetbar√°t"
        else:
            explanation += "üî∏ K√∂zepes k√∂rnyezeti hat√°ssal"
        
        return explanation

# =============================================================================
# 4. GLOB√ÅLIS OBJEKTUMOK
# =============================================================================

db = SimpleDatabase()
recommender = SimpleRecommender()

def get_user_version():
    """A/B/C verzi√≥ kiv√°laszt√°sa"""
    if 'version' not in session:
        session['version'] = random.choice(['v1', 'v2', 'v3'])
    return session['version']

# =============================================================================
# 5. F≈ê ROUTE-OK
# =============================================================================

@user_study_bp.route('/')
def welcome():
    return render_template('welcome.html')

@user_study_bp.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        try:
            age_group = request.form.get('age_group')
            education = request.form.get('education')
            cooking_frequency = request.form.get('cooking_frequency')
            sustainability_awareness = int(request.form.get('sustainability_awareness', 3))
            
            version = get_user_version()
            user_id = db.create_user(age_group, education, cooking_frequency, 
                                   sustainability_awareness, version)
            
            session['user_id'] = user_id
            session['version'] = version
            
            return redirect(url_for('user_study.instructions'))
            
        except Exception as e:
            print(f"Registration error: {e}")
            return render_template('register.html', error='Regisztr√°ci√≥ sikertelen')
    
    return render_template('register.html')

@user_study_bp.route('/instructions')
def instructions():
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    version = session.get('version', 'v1')
    return render_template('instructions.html', version=version)

@user_study_bp.route('/study')
def study():
    """F≈ë tanulm√°ny oldal"""
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    version = session.get('version', 'v1')
    search_query = request.args.get('search', '').strip()
    
    # Aj√°nl√°sok lek√©r√©se
    recommendations = recommender.get_recommendations(
        version=version, 
        search_query=search_query,
        n_recommendations=5
    )
    
    return render_template('study.html', 
                         recommendations=recommendations, 
                         version=version,
                         search_term=search_query)

@user_study_bp.route('/rate_recipe', methods=['POST'])
def rate_recipe():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    user_id = session['user_id']
    data = request.get_json()
    
    recipe_id = int(data.get('recipe_id'))
    rating = int(data.get('rating'))
    explanation_helpful = data.get('explanation_helpful')
    view_time = data.get('view_time_seconds', 0)
    
    db.log_interaction(user_id, recipe_id, rating, explanation_helpful, view_time)
    
    return jsonify({'status': 'success'})

@user_study_bp.route('/questionnaire', methods=['GET', 'POST'])
def questionnaire():
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    if request.method == 'POST':
        user_id = session['user_id']
        
        responses = {
            'system_usability': request.form.get('system_usability'),
            'recommendation_quality': request.form.get('recommendation_quality'),
            'trust_level': request.form.get('trust_level'),
            'explanation_clarity': request.form.get('explanation_clarity'),
            'sustainability_importance': request.form.get('sustainability_importance'),
            'overall_satisfaction': request.form.get('overall_satisfaction'),
            'additional_comments': request.form.get('additional_comments', '')
        }
        
        db.save_questionnaire(user_id, responses)
        return redirect(url_for('user_study.thank_you'))
    
    version = session.get('version', 'v1')
    return render_template('questionnaire.html', version=version)

@user_study_bp.route('/thank_you')
def thank_you():
    version = session.get('version', 'v1')
    return render_template('thank_you.html', version=version)

# =============================================================================
# 6. DEBUG ROUTE-OK (egyszer≈±s√≠tve)
# =============================================================================

@user_study_bp.route('/debug/status')
def debug_status():
    """Egyszer≈± debug st√°tusz"""
    result = "<h2>üîç System Status</h2>"
    
    result += f"<h3>üìä Basic Info:</h3>"
    result += f"Python: {sys.version_info.major}.{sys.version_info.minor}<br>"
    result += f"Recipes loaded: {len(recommender.recipes_df)}<br>"
    result += f"Search enabled: {'‚úÖ' if recommender.search_enabled else '‚ùå'}<br>"
    result += f"Scikit-learn: {'‚úÖ' if SKLEARN_AVAILABLE else '‚ùå'}<br>"
    
    result += f"<h3>üß™ Test Recommendation:</h3>"
    try:
        test_recs = recommender.get_recommendations('v3', '', 2)
        result += f"Generated: {len(test_recs)} recommendations<br>"
        if test_recs:
            result += f"First: {test_recs[0]['title']}<br>"
            result += f"Explanation: {test_recs[0].get('explanation', 'None')}<br>"
    except Exception as e:
        result += f"Error: {e}<br>"
    
    return result

@user_study_bp.route('/debug/similarity_test')
def test_similarity():
    """Egyszer≈±s√≠tett similarity teszt"""
    result = "<h2>üß™ Search Test</h2>"
    
    test_queries = ["hagyma, paprika", "csirke", "gomba"]
    
    for query in test_queries:
        result += f"<h3>Keres√©s: '{query}'</h3>"
        
        try:
            recs = recommender.get_recommendations('v1', query, 3)
            result += f"<p>Tal√°latok ({len(recs)}):</p><ul>"
            
            for i, rec in enumerate(recs):
                result += f"<li>{rec['title']}</li>"
            
            result += "</ul>"
            
        except Exception as e:
            result += f"<p>Hiba: {e}</p>"
        
        result += "<hr>"
    
    return result

# Export
__all__ = ['user_study_bp']
